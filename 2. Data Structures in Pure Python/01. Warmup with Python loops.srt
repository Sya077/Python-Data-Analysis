1
00:00:00,05 --> 00:00:02,04
- [Instructor] We will begin every video

2
00:00:02,04 --> 00:00:05,09
by importing a standard set of Python modules that we need.

3
00:00:05,09 --> 00:00:08,01
This is a typical list.

4
00:00:08,01 --> 00:00:10,07
It's expedient to load often used modules

5
00:00:10,07 --> 00:00:13,02
by giving them a shorter alias.

6
00:00:13,02 --> 00:00:19,05
NP is the community standard for NumPy, PD for pandas.

7
00:00:19,05 --> 00:00:22,03
We also load this simple commander entity interface

8
00:00:22,03 --> 00:00:25,00
to matplotlib, pyplots,

9
00:00:25,00 --> 00:00:27,09
and finally, we ask the Jupyter notebook

10
00:00:27,09 --> 00:00:31,03
to keep the plots that we make in the notebook itself

11
00:00:31,03 --> 00:00:34,02
instead of opening a different window.

12
00:00:34,02 --> 00:00:36,05
So I shall now execute this cell

13
00:00:36,05 --> 00:00:39,00
by pressing Shift + Return.

14
00:00:39,00 --> 00:00:40,07
If you've worked in programming before,

15
00:00:40,07 --> 00:00:42,09
you must be familiar with loops.

16
00:00:42,09 --> 00:00:46,06
They allow us to automate repetitive operations.

17
00:00:46,06 --> 00:00:47,08
And loops are a good topic

18
00:00:47,08 --> 00:00:50,07
to start a quick review of the Python core language,

19
00:00:50,07 --> 00:00:53,06
which will focus on the features that are most important

20
00:00:53,06 --> 00:00:55,06
to work with data.

21
00:00:55,06 --> 00:00:59,06
So, how exactly do loops work in Python?

22
00:00:59,06 --> 00:01:02,06
We see them in a concrete example.

23
00:01:02,06 --> 00:01:06,05
Consider the combinatorial problem of breaking a U.S. dollar

24
00:01:06,05 --> 00:01:09,01
into all possible combinations of coins.

25
00:01:09,01 --> 00:01:12,00
For instance, $1 coin,

26
00:01:12,00 --> 00:01:13,09
two half-dollar coins,

27
00:01:13,09 --> 00:01:17,07
one half-dollar coins and two quarters, and so on.

28
00:01:17,07 --> 00:01:20,05
You can already see how we're going to need

29
00:01:20,05 --> 00:01:24,02
several nested loops for this.

30
00:01:24,02 --> 00:01:26,08
The basic structure of a loop in Python

31
00:01:26,08 --> 00:01:30,08
is for variable in iterable

32
00:01:30,08 --> 00:01:34,00
followed by a block that is executing multiple times

33
00:01:34,00 --> 00:01:37,03
with the variable that can own the values provided

34
00:01:37,03 --> 00:01:39,03
by the iterable.

35
00:01:39,03 --> 00:01:41,06
But what is an iterable?

36
00:01:41,06 --> 00:01:43,05
We can think of it as a black box

37
00:01:43,05 --> 00:01:47,06
that keeps providing new values until it runs out.

38
00:01:47,06 --> 00:01:49,08
A simple example is a Python container

39
00:01:49,08 --> 00:01:52,02
such as a list or a dict.

40
00:01:52,02 --> 00:01:55,02
Perhaps the most important iterable is range,

41
00:01:55,02 --> 00:01:59,09
which provides integer value from a start to a stop,

42
00:01:59,09 --> 00:02:02,08
exclusive of the stop.

43
00:02:02,08 --> 00:02:09,00
That means that range zero 10 counts from zero to nine.

44
00:02:09,00 --> 00:02:10,08
There are many reasons for this convention

45
00:02:10,08 --> 00:02:12,03
about the end value.

46
00:02:12,03 --> 00:02:14,01
For instance, by looking at the end value,

47
00:02:14,01 --> 00:02:16,04
we see immediately that the total number of elements

48
00:02:16,04 --> 00:02:19,00
in the range is 10.

49
00:02:19,00 --> 00:02:21,07
In the end, however, we just have to accept this

50
00:02:21,07 --> 00:02:25,01
as one of the building assumptions of Python.

51
00:02:25,01 --> 00:02:28,04
Range has a couple more interesting features.

52
00:02:28,04 --> 00:02:30,01
We can omit the stat value,

53
00:02:30,01 --> 00:02:33,00
and then it's assumed to be zero.

54
00:02:33,00 --> 00:02:36,06
We can provide a step argument to move through the range

55
00:02:36,06 --> 00:02:39,05
in increments larger than one.

56
00:02:39,05 --> 00:02:40,08
And if I give the step,

57
00:02:40,08 --> 00:02:45,01
I must also give the initial value to avoid confusion.

58
00:02:45,01 --> 00:02:47,07
Notice that the step is the third argument

59
00:02:47,07 --> 00:02:50,09
that I give in line four.

60
00:02:50,09 --> 00:02:53,00
Let's go back to the dollar.

61
00:02:53,00 --> 00:02:56,03
To generate all possible ways to break it up,

62
00:02:56,03 --> 00:02:59,00
we will use a very simple minder strategy.

63
00:02:59,00 --> 00:03:01,09
We will consider all possible candidate combinations,

64
00:03:01,09 --> 00:03:05,04
including the zero to one $1 coins,

65
00:03:05,04 --> 00:03:07,09
zero to two half-dollar coins,

66
00:03:07,09 --> 00:03:10,09
zero to four quarters, and so on.

67
00:03:10,09 --> 00:03:12,01
And at the end for each,

68
00:03:12,01 --> 00:03:15,00
we will check whether it adds up to a dollar.

69
00:03:15,00 --> 00:03:17,07
Therefore we need six nested loops.

70
00:03:17,07 --> 00:03:19,06
A loop within a loop within a loop.

71
00:03:19,06 --> 00:03:23,09
Luckily, it's Python that will keep track of them.

72
00:03:23,09 --> 00:03:27,07
This means that the first loop will be over range two.

73
00:03:27,07 --> 00:03:30,09
So, looping over zero and one.

74
00:03:30,09 --> 00:03:34,00
To keep the maximum number of each coin inside,

75
00:03:34,00 --> 00:03:36,07
we'll write it as range(1+1).

76
00:03:36,07 --> 00:03:41,07
We then proceed with the other coins, one loop for each.

77
00:03:41,07 --> 00:03:46,00
Each nested loop is indented with respect to its parent.

78
00:03:46,00 --> 00:03:47,09
Inside the innermost loop,

79
00:03:47,09 --> 00:03:51,00
we will check whether the total amount is $1.

80
00:03:51,00 --> 00:03:54,06
If so, we will add this combination to a list

81
00:03:54,06 --> 00:03:58,08
called combinations, which will start that.

82
00:03:58,08 --> 00:04:02,09
Let's try this out.

83
00:04:02,09 --> 00:04:07,00
And let's look at the results.

84
00:04:07,00 --> 00:04:11,04
The first few combinations seem to check out fine.

85
00:04:11,04 --> 00:04:18,01
It turns out there are 293 ways to get a dollar in change.

86
00:04:18,01 --> 00:04:20,02
That's a solution to the problem we posed.

87
00:04:20,02 --> 00:04:21,08
However, in data analysis,

88
00:04:21,08 --> 00:04:25,01
it often happens that the solution raises a new question.

89
00:04:25,01 --> 00:04:26,04
For instance, how many ways

90
00:04:26,04 --> 00:04:29,04
to make $2 out of change or three?

91
00:04:29,04 --> 00:04:31,06
Does the number of combinations increase linearly

92
00:04:31,06 --> 00:04:34,09
or quadratically with the amount we're breaking up?

93
00:04:34,09 --> 00:04:37,09
What we need to do, then, is to take the code we wrote

94
00:04:37,09 --> 00:04:41,04
and generalize it to answer those questions.

95
00:04:41,04 --> 00:04:43,00
Creating a function,

96
00:04:43,00 --> 00:04:45,04
we'll call it, say, find combinations,

97
00:04:45,04 --> 00:04:47,05
that will take a dollar amount in cents

98
00:04:47,05 --> 00:04:50,04
and return all possible ways to do it.

99
00:04:50,04 --> 00:04:51,07
Before we do so,

100
00:04:51,07 --> 00:04:53,04
we make a couple of changes to our code

101
00:04:53,04 --> 00:04:56,08
to make it faster and to make it easier to generalize.

102
00:04:56,08 --> 00:05:00,04
This is an example of refactoring.

103
00:05:00,04 --> 00:05:03,04
The first change is that we will not loop by count,

104
00:05:03,04 --> 00:05:07,05
but by value, using the step argument of the range.

105
00:05:07,05 --> 00:05:10,06
For instance, instead of looping over quarters

106
00:05:10,06 --> 00:05:15,04
with count 25 between zero and four,

107
00:05:15,04 --> 00:05:18,01
we will loop over the amount

108
00:05:18,01 --> 00:05:24,04
from zero to 100 in steps of 25.

109
00:05:24,04 --> 00:05:28,05
So, I have rewritten all the loops in these terms.

110
00:05:28,05 --> 00:05:31,04
As you see, the end of the range is always a dollar,

111
00:05:31,04 --> 00:05:34,04
100 cents plus one.

112
00:05:34,04 --> 00:05:36,05
So the dollar is included.

113
00:05:36,05 --> 00:05:40,03
And the step is 100 for $1, 50 for half dollar,

114
00:05:40,03 --> 00:05:43,03
25 for the quarter, and so on.

115
00:05:43,03 --> 00:05:44,08
The second change we're making

116
00:05:44,08 --> 00:05:46,03
is that we don't actually need

117
00:05:46,03 --> 00:05:49,03
the innermost loop over the pennies.

118
00:05:49,03 --> 00:05:51,01
As long as the total up to that point

119
00:05:51,01 --> 00:05:53,06
is less or equal than a dollar,

120
00:05:53,06 --> 00:05:56,04
we can always make up the difference.

121
00:05:56,04 --> 00:05:57,09
Therefore, we compute the dollar

122
00:05:57,09 --> 00:06:01,05
and write a different test.

123
00:06:01,05 --> 00:06:05,02
The result is again the same.

124
00:06:05,02 --> 00:06:07,02
Now we can take our code

125
00:06:07,02 --> 00:06:10,07
and turn it into the function find combinations

126
00:06:10,07 --> 00:06:14,06
by replacing the value 100 with a variable argument.

127
00:06:14,06 --> 00:06:16,09
We'll call it total.

128
00:06:16,09 --> 00:06:18,07
We do need to indent our code

129
00:06:18,07 --> 00:06:22,03
to make up the body of the function.

130
00:06:22,03 --> 00:06:25,08
So, here we go, $2.

131
00:06:25,08 --> 00:06:28,09
Or $3.

132
00:06:28,09 --> 00:06:32,07
You may be curious to know how fast this number grows.

133
00:06:32,07 --> 00:06:35,00
A plot will give us an idea.

134
00:06:35,00 --> 00:06:38,09
So let's plot 100 through 500,

135
00:06:38,09 --> 00:06:42,06
and we use a comprehension, which we will explain later,

136
00:06:42,06 --> 00:06:46,03
to find a corresponding number of combinations.

137
00:06:46,03 --> 00:06:49,06
Matplotlib will give us a quick plot.

138
00:06:49,06 --> 00:06:52,00
In fact, the number grows approximately

139
00:06:52,00 --> 00:06:55,03
as the fifth power of the total.

140
00:06:55,03 --> 00:06:58,06
You will find the loops are everywhere in data analysis,

141
00:06:58,06 --> 00:07:01,00
so it's good to get familiar with them.

142
00:07:01,00 --> 00:07:03,08
In Python, you can do a lot with the for construct

143
00:07:03,08 --> 00:07:05,00
and with range.

