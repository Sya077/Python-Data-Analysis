1
00:00:00,04 --> 00:00:02,06
- [Instructor] In the last video for this chapter,

2
00:00:02,06 --> 00:00:04,07
I want to show you two NumPy features

3
00:00:04,07 --> 00:00:06,09
that are not always covered in tutorials,

4
00:00:06,09 --> 00:00:08,09
but they're still very useful.

5
00:00:08,09 --> 00:00:12,07
One is record arrays, where we can mix different data types

6
00:00:12,07 --> 00:00:15,06
and give descriptive names to fields.

7
00:00:15,06 --> 00:00:17,04
The other is date time objects,

8
00:00:17,04 --> 00:00:21,08
which as the name says, can encode a date and time.

9
00:00:21,08 --> 00:00:24,09
Let us load up a simple example of a record array,

10
00:00:24,09 --> 00:00:30,00
which I have prepared in the NumPy binary format.

11
00:00:30,00 --> 00:00:32,06
This is a partial David Bowie discography.

12
00:00:32,06 --> 00:00:36,01
Each entry shows the record name, the date of release

13
00:00:36,01 --> 00:00:39,07
and the top rank in the UK charts.

14
00:00:39,07 --> 00:00:41,06
Let's look at the data type.

15
00:00:41,06 --> 00:00:45,04
It's a list which shows the name of each field

16
00:00:45,04 --> 00:00:47,02
and the actual D type.

17
00:00:47,02 --> 00:00:51,04
For title, it's U32, which denotes a Unicode string

18
00:00:51,04 --> 00:00:54,05
of maximum length 32.

19
00:00:54,05 --> 00:00:58,05
For release, it's M eight brackets D

20
00:00:58,05 --> 00:01:03,03
which denotes a date time object with granularity of days.

21
00:01:03,03 --> 00:01:06,07
It could be as small as a nanosecond in fact.

22
00:01:06,07 --> 00:01:08,09
The eight refers to the size in bytes

23
00:01:08,09 --> 00:01:11,03
of each date time object.

24
00:01:11,03 --> 00:01:16,06
Last, the top rank, is an eight byte integer data type.

25
00:01:16,06 --> 00:01:20,05
If you're wondering about the less symbol in each of these,

26
00:01:20,05 --> 00:01:23,06
those refer to the endianness of the data types,

27
00:01:23,06 --> 00:01:27,02
the order in which the bytes are stored in memory.

28
00:01:27,02 --> 00:01:30,05
Inter-processors are little endian.

29
00:01:30,05 --> 00:01:32,08
So what can we do with a record array?

30
00:01:32,08 --> 00:01:36,01
Each record looks like a Python tuple,

31
00:01:36,01 --> 00:01:39,03
and we can extract the elements as we would for a tuple

32
00:01:39,03 --> 00:01:43,02
but we can also modify them.

33
00:01:43,02 --> 00:01:45,08
We can also use a dict like interface

34
00:01:45,08 --> 00:01:49,07
using the field names in brackets.

35
00:01:49,07 --> 00:01:54,05
This, in fact, will also get us a full column.

36
00:01:54,05 --> 00:01:56,04
To create a record array,

37
00:01:56,04 --> 00:02:00,07
you have to be a little careful in specifying the D type.

38
00:02:00,07 --> 00:02:03,02
It's useful to go read about data type descriptors

39
00:02:03,02 --> 00:02:05,00
in the NumPy documentation.

40
00:02:05,00 --> 00:02:06,05
But let's try one.

41
00:02:06,05 --> 00:02:08,07
We specify a subset of the information

42
00:02:08,07 --> 00:02:14,09
we have in discography, just the title and release date.

43
00:02:14,09 --> 00:02:16,09
This array is empty right now,

44
00:02:16,09 --> 00:02:21,08
but we can copy over the two columns.

45
00:02:21,08 --> 00:02:24,02
Here we see that the title strings

46
00:02:24,02 --> 00:02:27,08
have been truncated to 16 characters.

47
00:02:27,08 --> 00:02:31,03
Since all the data is stored contiguously in memory,

48
00:02:31,03 --> 00:02:33,00
the lengths that we prescribe for the fields

49
00:02:33,00 --> 00:02:35,06
are very important and set the limit for the data

50
00:02:35,06 --> 00:02:37,06
that we can store.

51
00:02:37,06 --> 00:02:40,06
We see also that we specified a finer granularity

52
00:02:40,06 --> 00:02:43,06
for the date time object, seconds,

53
00:02:43,06 --> 00:02:47,00
although it's all zeros because the discography array

54
00:02:47,00 --> 00:02:49,06
didn't have that information.

55
00:02:49,06 --> 00:02:51,06
We move on to the date time object,

56
00:02:51,06 --> 00:02:53,03
which is called datetime64

57
00:02:53,03 --> 00:02:56,08
to avoid confusion with the object in the standard library,

58
00:02:56,08 --> 00:03:01,02
and also to remind us that each element takes 64 bits.

59
00:03:01,02 --> 00:03:04,02
We can initialize date time object with strings,

60
00:03:04,02 --> 00:03:06,09
and we can give it as much detail as we want,

61
00:03:06,09 --> 00:03:09,05
just the year, a full date,

62
00:03:09,05 --> 00:03:14,04
and date and hour minute combination, or even beyond that.

63
00:03:14,04 --> 00:03:16,06
Date times can be compared,

64
00:03:16,06 --> 00:03:21,08
so noon came before 6 p.m. on that day, like any day.

65
00:03:21,08 --> 00:03:23,08
Date times can also be subtracted,

66
00:03:23,08 --> 00:03:27,05
resulting in a time delta object,

67
00:03:27,05 --> 00:03:30,06
which here is specified in minutes.

68
00:03:30,06 --> 00:03:33,02
The nice thing about these date time objects

69
00:03:33,02 --> 00:03:36,00
is that they are understood across NumPy.

70
00:03:36,00 --> 00:03:39,01
For instance, we can use the NumPy function diff,

71
00:03:39,01 --> 00:03:40,09
which computes the differences between

72
00:03:40,09 --> 00:03:43,02
successive elements of a vector

73
00:03:43,02 --> 00:03:44,09
to see how long it took David Bowie

74
00:03:44,09 --> 00:03:49,06
to come up with a new record after each one.

75
00:03:49,06 --> 00:03:52,07
Ziggy Stardust was especially quick.

76
00:03:52,07 --> 00:03:56,01
Another example may be making a range of these.

77
00:03:56,01 --> 00:04:01,02
NumPy in a range understand date times.

78
00:04:01,02 --> 00:04:03,04
And we see that the last day is excluded

79
00:04:03,04 --> 00:04:08,01
consistently with the conventions of range and a range.

80
00:04:08,01 --> 00:04:11,08
This functionality is extended even further in Pandas.

81
00:04:11,08 --> 00:04:14,07
And in fact, the whole idea of record arrays

82
00:04:14,07 --> 00:04:18,09
has a much stronger implementation in Pandas DataFrames.

83
00:04:18,09 --> 00:04:22,00
We'll learn about those later in this course.

