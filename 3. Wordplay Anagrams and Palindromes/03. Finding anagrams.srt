1
00:00:00,05 --> 00:00:02,02
- [Instructor] We pick up our exercise

2
00:00:02,02 --> 00:00:05,02
where we left it in the last video.

3
00:00:05,02 --> 00:00:08,05
We have made a sorted list of lowercase words.

4
00:00:08,05 --> 00:00:11,01
lets load it up.

5
00:00:11,01 --> 00:00:14,07
Now, remember our strategy of comparing signatures.

6
00:00:14,07 --> 00:00:16,02
Those are the sorted lists

7
00:00:16,02 --> 00:00:19,00
of the component letters of each word.

8
00:00:19,00 --> 00:00:21,01
We need a function to make them.

9
00:00:21,01 --> 00:00:24,01
Taking the string N again as an example,

10
00:00:24,01 --> 00:00:26,02
let's see what happens if we sort it.

11
00:00:26,02 --> 00:00:29,05
Which we do with the built-in sorted.

12
00:00:29,05 --> 00:00:32,04
Indeed, we get a sorted list of the letters,

13
00:00:32,04 --> 00:00:34,08
which is already the signature.

14
00:00:34,08 --> 00:00:36,08
We can use it to verify say

15
00:00:36,08 --> 00:00:43,02
that Elvis is an anagram of lives, but not of sings.

16
00:00:43,02 --> 00:00:45,08
For convenience, we will collate the list

17
00:00:45,08 --> 00:00:49,06
of characters back into a single signature to string.

18
00:00:49,06 --> 00:00:53,05
The way this is achieved in Python looks a little strange,

19
00:00:53,05 --> 00:00:57,02
since we need to call the method join on a string

20
00:00:57,02 --> 00:01:03,01
that specifies the connector so to speak of the join.

21
00:01:03,01 --> 00:01:08,09
If it's a dash, we get a-a-n-o-r.

22
00:01:08,09 --> 00:01:14,00
So the connector we really want is the empty string.

23
00:01:14,00 --> 00:01:15,05
We're ready to make a function

24
00:01:15,05 --> 00:01:19,04
that performs this operation in general.

25
00:01:19,04 --> 00:01:23,05
Now, I remind you that our anagram finding strategy

26
00:01:23,05 --> 00:01:28,01
is to build a dictionary of words indexed by signature.

27
00:01:28,01 --> 00:01:31,03
Of course, we could also try a brute-force search

28
00:01:31,03 --> 00:01:33,03
that loops to the dictionary,

29
00:01:33,03 --> 00:01:35,05
computes the signature for every word

30
00:01:35,05 --> 00:01:37,05
and compares it with the signature

31
00:01:37,05 --> 00:01:40,01
of the word we want to anagram.

32
00:01:40,01 --> 00:01:44,04
That's what find anagram does.

33
00:01:44,04 --> 00:01:48,07
This works and seems fast enough

34
00:01:48,07 --> 00:01:56,01
to see just how fast we can use the IPython magic %time.

35
00:01:56,01 --> 00:01:59,05
So 200 milliseconds, that is not a long time to wait

36
00:01:59,05 --> 00:02:01,03
but we become unbearable if we need

37
00:02:01,03 --> 00:02:04,03
to compute long lists of anagrams.

38
00:02:04,03 --> 00:02:06,06
So let's do this the smart way.

39
00:02:06,06 --> 00:02:10,03
As we said, we will build the Python dict

40
00:02:10,03 --> 00:02:13,05
of words indexed by signatures.

41
00:02:13,05 --> 00:02:17,02
In fact, the values in the dict will be set,

42
00:02:17,02 --> 00:02:22,01
that indeed, contain all the words with the same signature.

43
00:02:22,01 --> 00:02:25,04
We call it words by SIG.

44
00:02:25,04 --> 00:02:26,04
If you think about it,

45
00:02:26,04 --> 00:02:29,07
this is the perfect application for default dict.

46
00:02:29,07 --> 00:02:32,00
Which we introduced in chapter two.

47
00:02:32,00 --> 00:02:34,05
Since the first time that we meet the signature,

48
00:02:34,05 --> 00:02:35,03
we have to somehow produce an empty set

49
00:02:35,03 --> 00:02:42,02
and add to it, perfect.

50
00:02:42,02 --> 00:02:43,01
Perhaps we could perform one last filtering operation

51
00:02:43,01 --> 00:02:48,00
by removing signatures with a single word.

52
00:02:48,00 --> 00:02:50,09
After all, every word is an anagram of itself,

53
00:02:50,09 --> 00:02:53,05
but that's not very interesting.

54
00:02:53,05 --> 00:03:00,05
To do the filtering, we can use a dictionary comprehension.

55
00:03:00,05 --> 00:03:03,02
Remember, to iterate on both key

56
00:03:03,02 --> 00:03:07,01
and value we use dict items.

57
00:03:07,01 --> 00:03:11,04
Then with the clause to select non-trivial anagram sets

58
00:03:11,04 --> 00:03:14,08
will length greater than one.

59
00:03:14,08 --> 00:03:17,05
Excellent, we can allow the simple function

60
00:03:17,05 --> 00:03:20,02
find anagram first that looks up a word

61
00:03:20,02 --> 00:03:24,09
in the dict by signature.

62
00:03:24,09 --> 00:03:28,06
This works fine, let's see for my name.

63
00:03:28,06 --> 00:03:31,04
Nothing, I didn't really expect one,

64
00:03:31,04 --> 00:03:33,05
But perhaps we shouldn't get an error

65
00:03:33,05 --> 00:03:37,03
when no anagram is found just the empty set.

66
00:03:37,03 --> 00:03:41,03
To fix that, we'll use a try except close.

67
00:03:41,03 --> 00:03:44,05
And we'll catch the key error exception with

68
00:03:44,05 --> 00:03:50,00
accept key error and just return the empty set in that case.

69
00:03:50,00 --> 00:03:52,07
If you're not familiar with exceptions in Python,

70
00:03:52,07 --> 00:03:54,09
I encourage you to go look them up

71
00:03:54,09 --> 00:03:57,03
in the Python documentation.

72
00:03:57,03 --> 00:04:03,08
So let's try again to anagram my name and get the empty set.

73
00:04:03,08 --> 00:04:07,07
This new function is much, much faster.

74
00:04:07,07 --> 00:04:09,06
Now that we have set this machinery up,

75
00:04:09,06 --> 00:04:12,08
there are many interesting investigations we could do.

76
00:04:12,08 --> 00:04:15,04
For instance, how about finding the sets

77
00:04:15,04 --> 00:04:18,05
of anagrams with the longest words?

78
00:04:18,05 --> 00:04:21,07
We get that by sorting the signatures,

79
00:04:21,07 --> 00:04:24,05
which we get from keys applied to anagrams

80
00:04:24,05 --> 00:04:27,09
by SIG using length.

81
00:04:27,09 --> 00:04:30,07
So we use the sorted built-in,

82
00:04:30,07 --> 00:04:37,04
given a sorting key of Len and a sync for reverse order.

83
00:04:37,04 --> 00:04:39,02
These are the longest signatures,

84
00:04:39,02 --> 00:04:41,02
but to see the actual anagrams,

85
00:04:41,02 --> 00:04:45,07
we can wrap it in a list comprehension.

86
00:04:45,07 --> 00:04:48,05
The longest anagrams have 22 letters.

87
00:04:48,05 --> 00:04:50,02
Looking at this list though, I must say

88
00:04:50,02 --> 00:04:52,07
that these are compound medical words

89
00:04:52,07 --> 00:04:57,08
that are not too creative in anagrammatical terms.

90
00:04:57,08 --> 00:05:01,06
How about the set of anagrams with the most words?

91
00:05:01,06 --> 00:05:06,09
For this, we will sort the dict values instead of the keys.

92
00:05:06,09 --> 00:05:11,03
And again use Len as the sorting key.

93
00:05:11,03 --> 00:05:13,09
The two longest groups have 10 elements,

94
00:05:13,09 --> 00:05:18,06
though some of these words are not very easily recognizable.

95
00:05:18,06 --> 00:05:22,00
Well done, this completes our exercise.

96
00:05:22,00 --> 00:05:25,05
Next, let's put what you learned to good use

97
00:05:25,05 --> 00:05:29,00
and take on a challenge again about wordplay.

