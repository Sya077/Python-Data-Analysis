1
00:00:00,05 --> 00:00:01,03
- [Instructor] We begin.

2
00:00:01,03 --> 00:00:04,03
By loading a list of words from a file.

3
00:00:04,03 --> 00:00:06,02
Your exercise files.

4
00:00:06,02 --> 00:00:09,09
Already contain a list that we can use as an example.

5
00:00:09,09 --> 00:00:12,07
The file is words.txt

6
00:00:12,07 --> 00:00:16,06
and it sits in the same folder as this Jupyter notebook.

7
00:00:16,06 --> 00:00:19,09
That file is, in fact, the nineteen thirty four dictionary.

8
00:00:19,09 --> 00:00:23,07
That is distributed with many UNIX systems.

9
00:00:23,07 --> 00:00:29,00
If you wish, you can find a better one and use that instead.

10
00:00:29,00 --> 00:00:30,06
Now in Python.

11
00:00:30,06 --> 00:00:32,00
We talk of idioms

12
00:00:32,00 --> 00:00:34,01
to refer to code constructs.

13
00:00:34,01 --> 00:00:35,09
That have become the preferred way

14
00:00:35,09 --> 00:00:38,00
to achieve a certain goal.

15
00:00:38,00 --> 00:00:40,04
A classical example is looping through

16
00:00:40,04 --> 00:00:43,02
all the lines of a text files.

17
00:00:43,02 --> 00:00:44,02
To do so.

18
00:00:44,02 --> 00:00:46,08
We open the file for reading.

19
00:00:46,08 --> 00:00:48,05
Let's open

20
00:00:48,05 --> 00:00:50,07
with a mode of "R"

21
00:00:50,07 --> 00:00:53,08
and then, we can use the file as an iterable.

22
00:00:53,08 --> 00:00:55,05
In a fold loop.

23
00:00:55,05 --> 00:00:56,08
Which has the result

24
00:00:56,08 --> 00:01:00,03
or giving us the lines one by one.

25
00:01:00,03 --> 00:01:01,06
For the moment.

26
00:01:01,06 --> 00:01:03,05
All that we will do with each line,

27
00:01:03,05 --> 00:01:06,08
is just collect it in a list.

28
00:01:06,08 --> 00:01:08,09
What did we get?

29
00:01:08,09 --> 00:01:11,07
More than two hundred thousand words.

30
00:01:11,07 --> 00:01:14,06
Let's look at the first few using slicing.

31
00:01:14,06 --> 00:01:17,04
As we learned in chapter two.

32
00:01:17,04 --> 00:01:19,04
That's good.

33
00:01:19,04 --> 00:01:21,04
I see two problems though.

34
00:01:21,04 --> 00:01:24,09
Every word ends in the new line character.

35
00:01:24,09 --> 00:01:28,04
Denoted in "C" and in Python

36
00:01:28,04 --> 00:01:31,04
as backslash "n".

37
00:01:31,04 --> 00:01:33,08
Also some of the words are capitalized.

38
00:01:33,08 --> 00:01:35,01
Which will interfere

39
00:01:35,01 --> 00:01:38,07
with our scheme of computing signatures.

40
00:01:38,07 --> 00:01:43,00
We can fix both issues using Python string methods.

41
00:01:43,00 --> 00:01:46,05
To strip leading and trailing whitespace.

42
00:01:46,05 --> 00:01:48,02
Including new lines.

43
00:01:48,02 --> 00:01:50,03
We can apply strip.

44
00:01:50,03 --> 00:01:54,01
let's take our own for example.

45
00:01:54,01 --> 00:01:56,05
The new line is stripped away.

46
00:01:56,05 --> 00:01:59,05
Now to switch the entire string to lowercase.

47
00:01:59,05 --> 00:02:02,09
Who use the method lower.

48
00:02:02,09 --> 00:02:03,09
So now.

49
00:02:03,09 --> 00:02:05,06
There's something more interesting to do

50
00:02:05,06 --> 00:02:08,03
in the body of a loop.

51
00:02:08,03 --> 00:02:09,08
Will append to the empty list

52
00:02:09,08 --> 00:02:15,09
is stripped and lowercase version of each line.

53
00:02:15,09 --> 00:02:17,08
Now I see a duplicate.

54
00:02:17,08 --> 00:02:19,00
Which comes from "a"

55
00:02:19,00 --> 00:02:22,03
appearing both in uppercase and lowercase.

56
00:02:22,03 --> 00:02:24,01
One way to get rid of duplicates

57
00:02:24,01 --> 00:02:27,07
is to build not a list but a set.

58
00:02:27,07 --> 00:02:30,01
so I will do my loop once more.

59
00:02:30,01 --> 00:02:32,08
Replace the empty initial list with the empty set

60
00:02:32,08 --> 00:02:36,01
and replace a pen with ADD

61
00:02:36,01 --> 00:02:39,01
and given that the body of the loop is just one line.

62
00:02:39,01 --> 00:02:40,03
There is an even more

63
00:02:40,03 --> 00:02:42,02
idiomatic way of writing it.

64
00:02:42,02 --> 00:02:46,00
You probably guessed it already as a comprehension.

65
00:02:46,00 --> 00:02:47,02
The comprehension will have

66
00:02:47,02 --> 00:02:49,06
the expression I want to collect

67
00:02:49,06 --> 00:02:54,08
and then the loop over lines in the file.

68
00:02:54,08 --> 00:02:56,08
Here it is.

69
00:02:56,08 --> 00:02:59,04
If we wish to restore the alphabetical order.

70
00:02:59,04 --> 00:03:01,01
We can just wrap the set

71
00:03:01,01 --> 00:03:03,08
in the Python built-in sorted.

72
00:03:03,08 --> 00:03:06,04
Which produces a list.

73
00:03:06,04 --> 00:03:11,07
A list however without duplications.

74
00:03:11,07 --> 00:03:14,05
We are now ready to make Anna Graham's.

75
00:03:14,05 --> 00:03:15,04
By the way.

76
00:03:15,04 --> 00:03:17,01
If you want to try in a different language

77
00:03:17,01 --> 00:03:18,05
such as French.

78
00:03:18,05 --> 00:03:21,02
You can follow along what we did

79
00:03:21,02 --> 00:03:23,01
with the appropriate file.

80
00:03:23,01 --> 00:03:24,08
The good thing is that in Python three

81
00:03:24,08 --> 00:03:27,03
all strings are natively unicode.

82
00:03:27,03 --> 00:03:29,00
Meaning that they can handle

83
00:03:29,00 --> 00:03:32,05
international character sets transparently.

84
00:03:32,05 --> 00:03:34,05
The characters are encoded internally

85
00:03:34,05 --> 00:03:37,02
using multiple bytes as needed.

86
00:03:37,02 --> 00:03:39,04
They only care that we need to take

87
00:03:39,04 --> 00:03:42,01
is to tell Python which encoding to use for

88
00:03:42,01 --> 00:03:44,04
the files we read and write.

89
00:03:44,04 --> 00:03:45,09
There are multiple mappings

90
00:03:45,09 --> 00:03:48,04
between character sets and bytes.

91
00:03:48,04 --> 00:03:51,07
So we need to know which one was used.

92
00:03:51,07 --> 00:03:54,08
Your exercise files include a French dictionary.

93
00:03:54,08 --> 00:03:55,07
Written using

94
00:03:55,07 --> 00:03:58,00
the iso-eighty eight five nine encoding

95
00:03:58,00 --> 00:04:00,05
also known as latin one.

96
00:04:00,05 --> 00:04:04,07
Let's read all of its lines.

97
00:04:04,07 --> 00:04:06,05
In this case instead of a loop.

98
00:04:06,05 --> 00:04:10,00
We use the built-in method with lines.

