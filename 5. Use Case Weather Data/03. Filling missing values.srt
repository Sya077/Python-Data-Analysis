1
00:00:00,05 --> 00:00:02,03
- [Instructor] We pick up where we left

2
00:00:02,03 --> 00:00:05,07
and load temperature data for Pasadena, California

3
00:00:05,07 --> 00:00:09,00
using our getweather module.

4
00:00:09,00 --> 00:00:12,02
This is a time series, a sequence of values,

5
00:00:12,02 --> 00:00:15,08
organized chronologically, usually with equal cadence,

6
00:00:15,08 --> 00:00:18,06
that is the same time interval

7
00:00:18,06 --> 00:00:22,03
between every two consecutive samples.

8
00:00:22,03 --> 00:00:24,08
To get a sense of the data, one of them begins

9
00:00:24,08 --> 00:00:27,01
by computing its average value

10
00:00:27,01 --> 00:00:31,07
and perhaps its extreme, the minimum and maximum.

11
00:00:31,07 --> 00:00:37,01
With NumPy, we can use mean, min, and max.

12
00:00:37,01 --> 00:00:42,01
But wait, in this case, we seem to get NaNs.

13
00:00:42,01 --> 00:00:43,07
What's going on?

14
00:00:43,07 --> 00:00:45,07
It shouldn't be surprising, if we remember

15
00:00:45,07 --> 00:00:48,05
that the data contains missing values,

16
00:00:48,05 --> 00:00:52,06
which are indeed represented as NaNs.

17
00:00:52,06 --> 00:00:55,01
And NaNs can't really participate

18
00:00:55,01 --> 00:01:00,06
in any mathematical operation, NaN plus one is still NaN.

19
00:01:00,06 --> 00:01:03,01
In fact, how many do we have?

20
00:01:03,01 --> 00:01:05,04
The NumPy function isnan,

21
00:01:05,04 --> 00:01:10,00
creates a Boolean array of NaN-ness, so to speak.

22
00:01:10,00 --> 00:01:13,04
We can then count the instances of true

23
00:01:13,04 --> 00:01:16,08
in this array by using a neat trick.

24
00:01:16,08 --> 00:01:19,08
If we do arithmetics with Booleans in Python,

25
00:01:19,08 --> 00:01:21,05
they are converted to integers

26
00:01:21,05 --> 00:01:25,00
with false counting as zero and true as one.

27
00:01:25,00 --> 00:01:30,00
So, for instance, false plus true plus true is two.

28
00:01:30,00 --> 00:01:32,02
It follows that we can count the trues

29
00:01:32,02 --> 00:01:38,09
in a Boolean array just by summing it up with NumPy sum.

30
00:01:38,09 --> 00:01:40,04
So what can we do?

31
00:01:40,04 --> 00:01:42,06
Missing values are so common, in fact,

32
00:01:42,06 --> 00:01:45,02
the NumPy offers versions of its functions

33
00:01:45,02 --> 00:01:47,05
that simply ignore them.

34
00:01:47,05 --> 00:01:52,03
For instance, NumPy nanmin and nanmax.

35
00:01:52,03 --> 00:01:56,00
If we do need an uninterrupted series of numbers,

36
00:01:56,00 --> 00:01:59,04
we could just set the NaNs to the average of the column.

37
00:01:59,04 --> 00:02:02,03
This is yet another application of fancy indexing

38
00:02:02,03 --> 00:02:05,08
because we want to modify only the NaN elements.

39
00:02:05,08 --> 00:02:08,09
So we write something like Pasadena to mean

40
00:02:08,09 --> 00:02:15,04
fancy indexed to the true NaN Boolean mask

41
00:02:15,04 --> 00:02:22,08
is set equal to the NaN mean of the same variable.

42
00:02:22,08 --> 00:02:24,05
This works fine.

43
00:02:24,05 --> 00:02:26,06
We can tell which elements we changed

44
00:02:26,06 --> 00:02:28,07
because they have more digits than all the others,

45
00:02:28,07 --> 00:02:30,08
which were encoded with limited precision

46
00:02:30,08 --> 00:02:35,05
in the GHCN data.

47
00:02:35,05 --> 00:02:37,09
The integrated dataset can now be plotted

48
00:02:37,09 --> 00:02:40,07
without discontinuities.

49
00:02:40,07 --> 00:02:44,02
A more powerful approach to restoring missing values

50
00:02:44,02 --> 00:02:45,09
is to interpolate.

51
00:02:45,09 --> 00:02:48,08
That is, we can use neighbor values

52
00:02:48,08 --> 00:02:50,09
to compute a plausible number

53
00:02:50,09 --> 00:02:53,09
for the values that are missing.

54
00:02:53,09 --> 00:02:56,08
Let me demonstrate in a tall problem.

55
00:02:56,08 --> 00:02:59,02
Let's say we measure a function y,

56
00:02:59,02 --> 00:03:03,02
defined at integers x between zero and eight,

57
00:03:03,02 --> 00:03:05,07
but we don't have some of the values.

58
00:03:05,07 --> 00:03:07,09
In this case, we don't have value set x

59
00:03:07,09 --> 00:03:11,09
of two, three, and six.

60
00:03:11,09 --> 00:03:14,04
Let me show you all of this in a plot.

61
00:03:14,04 --> 00:03:16,06
I will now define an array of the integers

62
00:03:16,06 --> 00:03:19,09
at which we do want new interpolated values.

63
00:03:19,09 --> 00:03:22,02
I use NumPy linspace, so if I sat down

64
00:03:22,02 --> 00:03:27,01
and I said zero and eight, it's nine elements total.

65
00:03:27,01 --> 00:03:30,04
The function of NumPy interp takes as arguments

66
00:03:30,04 --> 00:03:35,04
the desired location, my xnew, followed by the data we have,

67
00:03:35,04 --> 00:03:38,06
x and y.

68
00:03:38,06 --> 00:03:42,04
It returns values that are interpolated linearly

69
00:03:42,04 --> 00:03:46,05
by fitting segments between existing data points.

70
00:03:46,05 --> 00:03:51,09
Here I'm plotting interpolated points as orange squares.

71
00:03:51,09 --> 00:03:55,04
This seems to make sense and to be rather conservative.

72
00:03:55,04 --> 00:03:57,03
The newx sequence, if you needed to,

73
00:03:57,03 --> 00:03:59,02
could well be the answer.

74
00:03:59,02 --> 00:04:02,07
30 points between zero and eight.

75
00:04:02,07 --> 00:04:05,00
So let's use interpolation to fill missing values

76
00:04:05,00 --> 00:04:07,06
in the Pasadena temperature data.

77
00:04:07,06 --> 00:04:10,01
I need to load it again, since I fixed it already

78
00:04:10,01 --> 00:04:15,01
by replacing NaNs with nints.

79
00:04:15,01 --> 00:04:18,07
Here, now it's broken again, so to interpolate,

80
00:04:18,07 --> 00:04:23,00
we select the good data points, those that are not NaNs,

81
00:04:23,00 --> 00:04:28,02
and a tilde in this expression denotes logical notation.

82
00:04:28,02 --> 00:04:30,06
Then we make an array of the x-values

83
00:04:30,06 --> 00:04:33,00
for which we want interpolation.

84
00:04:33,00 --> 00:04:36,06
All days from one through 365,

85
00:04:36,06 --> 00:04:42,05
and then we can apply NumPy interp.

86
00:04:42,05 --> 00:04:44,02
This seems to work well.

87
00:04:44,02 --> 00:04:48,01
We celebrate by generalizing our Pasadena-centric code,

88
00:04:48,01 --> 00:04:52,07
so that it can fill up holes in any array by interpolation.

89
00:04:52,07 --> 00:04:55,03
It's just a question of replacing Pasadena

90
00:04:55,03 --> 00:04:59,03
with a generic array argument, and 365

91
00:04:59,03 --> 00:05:03,02
with the length of that array.

92
00:05:03,02 --> 00:05:06,08
Finally, we can plot interpolated temperature series

93
00:05:06,08 --> 00:05:10,00
in all their glory using our new function.

