1
00:00:00,05 --> 00:00:02,03
- [Instructor] We're going to conclude a NumPy practice,

2
00:00:02,03 --> 00:00:05,09
by making a quick but impressive weather visualization,

3
00:00:05,09 --> 00:00:07,02
that showcases the power

4
00:00:07,02 --> 00:00:10,01
and flexibility of NumPy and Matplotlib.

5
00:00:10,01 --> 00:00:12,02
It's inspired by the New York Times

6
00:00:12,02 --> 00:00:14,01
weather chart shown here.

7
00:00:14,01 --> 00:00:16,08
And it shows daily minima and maxima,

8
00:00:16,08 --> 00:00:20,03
the proper band in the context of their normal range,

9
00:00:20,03 --> 00:00:25,01
dark gray and of their records, light gray.

10
00:00:25,01 --> 00:00:27,00
We will again use Pasadena as an example,

11
00:00:27,00 --> 00:00:28,04
but you can do your own city,

12
00:00:28,04 --> 00:00:31,06
if it's included in the NOAA data set.

13
00:00:31,06 --> 00:00:33,04
Remember, we want to show Records,

14
00:00:33,04 --> 00:00:36,06
which means that we need all the data we can get.

15
00:00:36,06 --> 00:00:38,00
The Gateway, the module,

16
00:00:38,00 --> 00:00:41,02
that's a query for one year of data at a time.

17
00:00:41,02 --> 00:00:44,03
So, we'll call it repeatedly collecting the results

18
00:00:44,03 --> 00:00:49,00
in a comprehension and feeding that to NumPy vstack,

19
00:00:49,00 --> 00:00:51,05
which makes a two-dimensional array formally

20
00:00:51,05 --> 00:00:54,08
so one-dimensional arrays.

21
00:00:54,08 --> 00:00:59,05
The result can be visualized with matchshow.

22
00:00:59,05 --> 00:01:02,07
We've added also a colored bar to provide a reference

23
00:01:02,07 --> 00:01:05,05
of the mapping of values to color.

24
00:01:05,05 --> 00:01:07,07
And we have specified the extent

25
00:01:07,07 --> 00:01:11,03
to get more informative labels on the axis.

26
00:01:11,03 --> 00:01:14,04
We see some missing data, the white patches,

27
00:01:14,04 --> 00:01:17,08
and we can observe winter and summer nights getting warmer

28
00:01:17,08 --> 00:01:20,05
towards the end of the century.

29
00:01:20,05 --> 00:01:23,09
For simplicity, we will forego filling a nance

30
00:01:23,09 --> 00:01:26,05
and use NaN robust functions.

31
00:01:26,05 --> 00:01:30,00
We want record temperatures for every day of the year.

32
00:01:30,00 --> 00:01:34,05
This means that we can use NumPy nanmin on the demand data

33
00:01:34,05 --> 00:01:37,04
and specify axis equals zero,

34
00:01:37,04 --> 00:01:39,00
so that the minimum will be taken

35
00:01:39,00 --> 00:01:42,02
across all rows for each column.

36
00:01:42,02 --> 00:01:46,05
We do the same for tmax using NumPy nanmax.

37
00:01:46,05 --> 00:01:50,07
Let's see the records.

38
00:01:50,07 --> 00:01:52,02
Now for the normals.

39
00:01:52,02 --> 00:01:55,01
In the New York Times plot the normal temperature range

40
00:01:55,01 --> 00:01:57,04
for each day is defined as the average

41
00:01:57,04 --> 00:02:02,05
of the low and high from 1981 to 2010.

42
00:02:02,05 --> 00:02:07,05
So we build another stacked array with a reduced year range.

43
00:02:07,05 --> 00:02:12,05
And again, we take nan robust means, across rows.

44
00:02:12,05 --> 00:02:16,07
So that's axis equals zero.

45
00:02:16,07 --> 00:02:19,09
Here's the normal range.

46
00:02:19,09 --> 00:02:22,02
We're ready to get the plot together.

47
00:02:22,02 --> 00:02:26,02
We do Pasadena in 2018, just like the Times,

48
00:02:26,02 --> 00:02:28,07
so I'd better get that data.

49
00:02:28,07 --> 00:02:30,01
To plot the band,

50
00:02:30,01 --> 00:02:33,04
we use Micro-LIBS fill between which needs an x-axis

51
00:02:33,04 --> 00:02:35,04
to coordinate the array.

52
00:02:35,04 --> 00:02:36,05
It needs also the lower

53
00:02:36,05 --> 00:02:39,02
and upper lines that delimit the band.

54
00:02:39,02 --> 00:02:40,02
So for the x-axis,

55
00:02:40,02 --> 00:02:45,03
I will use the day of the year for one to 365.

56
00:02:45,03 --> 00:02:47,08
Here it is, I will do similar bands

57
00:02:47,08 --> 00:02:50,06
for the records and normal ranges.

58
00:02:50,06 --> 00:02:54,08
I also want to show the average temperature for the year.

59
00:02:54,08 --> 00:02:56,08
I have to compute that though.

60
00:02:56,08 --> 00:03:00,07
That would be the mean of the minimum temperature

61
00:03:00,07 --> 00:03:03,01
plus the mean of the maximum

62
00:03:03,01 --> 00:03:07,00
all across the year, divided by two.

63
00:03:07,00 --> 00:03:09,00
In 2018,

64
00:03:09,00 --> 00:03:14,02
that was 19.46 degrees Celsius.

65
00:03:14,02 --> 00:03:16,04
I'm going to put this average temperature in the title,

66
00:03:16,04 --> 00:03:19,04
so I need to build up a string for that.

67
00:03:19,04 --> 00:03:22,01
For that, I will use the very convenient formatted string

68
00:03:22,01 --> 00:03:25,09
literals introduced in Python 3.6.

69
00:03:25,09 --> 00:03:28,08
If I start the string with an "F" before the quotes,

70
00:03:28,08 --> 00:03:31,00
I can include variable names in braces,

71
00:03:31,00 --> 00:03:33,06
which are then replaced by their values.

72
00:03:33,06 --> 00:03:36,09
I can also specify formatting instructions as I would,

73
00:03:36,09 --> 00:03:39,07
using the string format interface.

74
00:03:39,07 --> 00:03:42,00
For instance, two decimal digits

75
00:03:42,00 --> 00:03:45,08
for the average temperature.

76
00:03:45,08 --> 00:03:47,08
Let me put everything together.

77
00:03:47,08 --> 00:03:52,00
I plot the three bands for record normal and current year.

78
00:03:52,00 --> 00:03:54,01
I have also looked up the red green blue,

79
00:03:54,01 --> 00:03:57,03
the composition of the New York Times colors,

80
00:03:57,03 --> 00:04:00,09
which Matplotlib bonds as values between zero and one.

81
00:04:00,09 --> 00:04:04,07
The optional step equals myth makes the band look blocky

82
00:04:04,07 --> 00:04:07,06
so the individual days are in evidence.

83
00:04:07,06 --> 00:04:09,09
And last, the alpha setting makes

84
00:04:09,09 --> 00:04:13,02
the current year band partially transparent.

85
00:04:13,02 --> 00:04:17,01
I set reasonable access limit and finally add a title.

86
00:04:17,01 --> 00:04:21,02
Let's fire it off, very nice.

87
00:04:21,02 --> 00:04:23,06
In 2018, some values are missing,

88
00:04:23,06 --> 00:04:26,00
we see the purple band is interrupted

89
00:04:26,00 --> 00:04:29,02
and those are actually the hottest days.

90
00:04:29,02 --> 00:04:32,01
So you can play with other cities we'll turn this example

91
00:04:32,01 --> 00:04:36,08
into a function that can plot any year in any station.

92
00:04:36,08 --> 00:04:42,03
So here's New York in 2018.

93
00:04:42,03 --> 00:04:45,01
NumPy is extremely powerful and flexible,

94
00:04:45,01 --> 00:04:47,03
so you should learn about it in depth.

95
00:04:47,03 --> 00:04:50,00
Coupled with Matplotlib it offers a direct route

96
00:04:50,00 --> 00:04:53,04
to beautiful and informative visualizations.

97
00:04:53,04 --> 00:04:56,07
In my course, Python Statistics Essential Training,

98
00:04:56,07 --> 00:04:58,08
explores statistical plots in more detail

99
00:04:58,08 --> 00:05:00,06
and with more examples.

100
00:05:00,06 --> 00:05:03,00
You are now ready for your challenge.

