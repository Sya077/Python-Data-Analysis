1
00:00:00,05 --> 00:00:02,00
- [Instructor] We have seen how to load

2
00:00:02,00 --> 00:00:03,09
and create dataframes

3
00:00:03,09 --> 00:00:07,09
and how to select records based on boolean conditions

4
00:00:07,09 --> 00:00:09,09
both with fancy indexing

5
00:00:09,09 --> 00:00:14,07
and with a string expression-based query interface.

6
00:00:14,07 --> 00:00:18,00
Now we'll see how we can make selections even more directly

7
00:00:18,00 --> 00:00:21,03
and more efficiently using indices.

8
00:00:21,03 --> 00:00:26,03
So let's load up our Nobel list data set again.

9
00:00:26,03 --> 00:00:29,00
The index is currently the simplest possible

10
00:00:29,00 --> 00:00:33,09
just numbers from zero through 949.

11
00:00:33,09 --> 00:00:37,01
We elevate the years to serve as index.

12
00:00:37,01 --> 00:00:39,09
We do this with a set index method

13
00:00:39,09 --> 00:00:41,08
which does not work in place

14
00:00:41,08 --> 00:00:46,01
but other creates a new dataframe.

15
00:00:46,01 --> 00:00:48,03
Now the years appear as the index

16
00:00:48,03 --> 00:00:51,00
at the front of each row.

17
00:00:51,00 --> 00:00:53,09
And here's the index itself.

18
00:00:53,09 --> 00:00:55,06
This shows that in Pandas,

19
00:00:55,06 --> 00:00:58,05
indices do not need to have unique values.

20
00:00:58,05 --> 00:01:00,06
That's a feature, not a bug.

21
00:01:00,06 --> 00:01:03,06
It lets us select all records for a year, for instance,

22
00:01:03,06 --> 00:01:05,07
using the indexing notation

23
00:01:05,07 --> 00:01:08,08
and here things get a bit complicated.

24
00:01:08,08 --> 00:01:12,01
There are several ways to do indexing and slicing in Pandas,

25
00:01:12,01 --> 00:01:15,01
some equivalent to each other, some not.

26
00:01:15,01 --> 00:01:17,00
I'm going to show you the two interfaces

27
00:01:17,00 --> 00:01:19,09
that I think are the least confusing.

28
00:01:19,09 --> 00:01:22,09
To select all records for a given index,

29
00:01:22,09 --> 00:01:28,04
we use .loc followed by brackets, not parentheses,

30
00:01:28,04 --> 00:01:31,06
with the index value.

31
00:01:31,06 --> 00:01:33,06
For instance, 1901.

32
00:01:33,06 --> 00:01:35,06
We can also add a column name

33
00:01:35,06 --> 00:01:40,03
just as if we were selecting a cell in a numpy array.

34
00:01:40,03 --> 00:01:43,02
The result is a series.

35
00:01:43,02 --> 00:01:46,05
In addition to selecting individual index values

36
00:01:46,05 --> 00:01:49,03
.loc allows for slices.

37
00:01:49,03 --> 00:01:51,06
But in a break from Python new search,

38
00:01:51,06 --> 00:01:55,08
the range is inclusive of its end value.

39
00:01:55,08 --> 00:02:00,09
If we choose the years of the great war, 1914-1918,

40
00:02:00,09 --> 00:02:05,00
then 1918 appears in the selection.

41
00:02:05,00 --> 00:02:07,09
We are not limited to all micro-indices.

42
00:02:07,09 --> 00:02:09,03
We can set up a dataframe

43
00:02:09,03 --> 00:02:12,06
indexed by discipline, for instance.

44
00:02:12,06 --> 00:02:16,01
And it's always best to keep the index sorted

45
00:02:16,01 --> 00:02:22,00
which we do with sort_index.

46
00:02:22,00 --> 00:02:26,01
Then we can select not just individual index values,

47
00:02:26,01 --> 00:02:30,03
but also ranges, which again, are inclusive.

48
00:02:30,03 --> 00:02:33,00
So physics,

49
00:02:33,00 --> 00:02:36,05
or medicine through peace.

50
00:02:36,05 --> 00:02:39,04
Here there are 353 rows

51
00:02:39,04 --> 00:02:42,03
but Pandas is only showing us a few at the beginning

52
00:02:42,03 --> 00:02:44,00
and at the end.

53
00:02:44,00 --> 00:02:47,07
That's what the ellipses symbols mean in the middle.

54
00:02:47,07 --> 00:02:50,00
If you want numpy style indexing,

55
00:02:50,00 --> 00:02:53,02
looking only the progressive count of the records,

56
00:02:53,02 --> 00:02:58,00
you can have it with .iloc, again, brackets.

57
00:02:58,00 --> 00:03:01,05
Here we get the first 10 records, whatever they are,

58
00:03:01,05 --> 00:03:05,03
in the dataframe in its current order.

59
00:03:05,03 --> 00:03:07,04
But this is not the end of the story.

60
00:03:07,04 --> 00:03:11,01
Pandas supports multi indices.

61
00:03:11,01 --> 00:03:17,00
For instance, a dataframe indices nobelists by year first,

62
00:03:17,00 --> 00:03:19,04
and then discipline.

63
00:03:19,04 --> 00:03:22,02
It looks like this.

64
00:03:22,02 --> 00:03:27,01
The underlying index is a very complicated beast.

65
00:03:27,01 --> 00:03:30,07
But we can isolate the values set at two levels

66
00:03:30,07 --> 00:03:37,02
using, appropriately, get level values.

67
00:03:37,02 --> 00:03:40,04
Armed with this multi-index dataframe,

68
00:03:40,04 --> 00:03:44,02
we can select records by both year and discipline.

69
00:03:44,02 --> 00:03:47,09
Passing it two-pole to .loc.

70
00:03:47,09 --> 00:03:51,02
For instance, physics and 2017.

71
00:03:51,02 --> 00:03:54,04
Slicing however, can get complicated.

72
00:03:54,04 --> 00:03:59,03
Say we want chemistry prizes between 1901 and 1910.

73
00:03:59,03 --> 00:04:02,02
What we would like to do is to write a slice

74
00:04:02,02 --> 00:04:04,05
with a column in a two-pole.

75
00:04:04,05 --> 00:04:07,09
But Python doesn't allow that.

76
00:04:07,09 --> 00:04:11,07
How about we use the long-hand expression for the slice?

77
00:04:11,07 --> 00:04:15,03
Slice by indices start and end value.

78
00:04:15,03 --> 00:04:17,07
That's still confusing to Pandas

79
00:04:17,07 --> 00:04:22,09
because then it tries to use chemistry as a column name.

80
00:04:22,09 --> 00:04:26,02
What works is to request the set of columns

81
00:04:26,02 --> 00:04:29,08
explicitly in the .loc expression.

82
00:04:29,08 --> 00:04:33,09
In this case, all of them with a comma.

83
00:04:33,09 --> 00:04:37,02
Fancy indexing works also.

84
00:04:37,02 --> 00:04:40,07
Here, slice none means that we're taking all the years

85
00:04:40,07 --> 00:04:43,07
but we select a list of the disciplines.

86
00:04:43,07 --> 00:04:48,08
And again, all the fields.

87
00:04:48,08 --> 00:04:51,07
Finally, while multi-indexing is powerful,

88
00:04:51,07 --> 00:04:53,07
it can be confusing.

89
00:04:53,07 --> 00:04:57,06
And so you may have to resort to trial and error.

90
00:04:57,06 --> 00:05:00,01
Any selection that you make that way, however,

91
00:05:00,01 --> 00:05:03,03
you can also achieve without multi-indexing

92
00:05:03,03 --> 00:05:07,02
by using criteria on the values in the columns.

93
00:05:07,02 --> 00:05:13,08
For instance, chemistry prizes between 1901 and 1910.

94
00:05:13,08 --> 00:05:16,08
Where I have built a three boolean arrays,

95
00:05:16,08 --> 00:05:19,02
years are going to equal the 1901,

96
00:05:19,02 --> 00:05:22,00
years less or equal to 1910,

97
00:05:22,00 --> 00:05:24,09
and discipline equals equals chemistry

98
00:05:24,09 --> 00:05:29,03
and I have taken the logical end with the ampersand.

99
00:05:29,03 --> 00:05:31,09
Or again, with query,

100
00:05:31,09 --> 00:05:35,03
which lets me write the same selection

101
00:05:35,03 --> 00:05:39,04
in a more intuitive form.

102
00:05:39,04 --> 00:05:43,02
Note, however, that all these queries return new dataframes.

103
00:05:43,02 --> 00:05:45,02
So you cannot use them to modify values

104
00:05:45,02 --> 00:05:49,00
in the original table as you could do with the indices.

